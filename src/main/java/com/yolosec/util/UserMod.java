package com.yolosec.util;

import com.yolosec.domain.User;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

/**
 *
 * @author Administrator
 */
public class UserMod extends javax.swing.JPanel {

    /**
     * Creates new form UserMod
     */
    public UserMod() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jUserList = new javax.swing.JList();
        btnLoad = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();

        jUserList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jUserList);

        btnLoad.setText("Load ...");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnUpdate.setText("Push Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove User");
        btnRemove.setToolTipText("");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnLoad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList jUserList;
    // End of variables declaration//GEN-END:variables
    /**
     *
     * @param username
     * @param password
     * @param spaceshipid optional id, if value is -1, get value from database
     * @return Returns if user is created
     * @throws Exception
     */
    private boolean CreateUser(String username, String password, Integer spaceshipid) throws Exception {
        Exception ErrM = null;
        Connection connect = null;
        PreparedStatement preparedStatementSpaceship = null;
        PreparedStatement preparedStatementUser = null;
        try {
            System.out.println(String.format("---[DATABASE] %s", ConnectionString.getConnectionString()));
            System.out.println("---[DATABASE] Setting up connection...");
            Class.forName("com.mysql.jdbc.Driver");
            connect = DriverManager.getConnection(ConnectionString.getConnectionString());
            System.out.println("---[DATABASE] Connection established");

            if (spaceshipid < 0) {
                preparedStatementUser = connect.prepareStatement("SELECT MAX(spaceship_id) FROM account;");
                ResultSet result = preparedStatementUser.executeQuery();
                spaceshipid = result.getInt(1) + 1;
            }

            preparedStatementSpaceship = connect.prepareStatement("INSERT INTO spaceship (id, position_x, position_y) VALUES (?, ?, ?);");
            preparedStatementUser = connect.prepareStatement("INSERT INTO account (username, password, spaceship_id) VALUES (?, ?, ?);");

            preparedStatementSpaceship.setInt(1, spaceshipid);
            preparedStatementSpaceship.setInt(2, 0);
            preparedStatementSpaceship.setInt(3, 0);
            preparedStatementUser.setString(1, username);
            preparedStatementUser.setString(2, password);
            preparedStatementUser.setInt(3, spaceshipid);

            preparedStatementSpaceship.executeUpdate();
            preparedStatementUser.executeUpdate();
            System.out.println("---[DATABASE] User created: " + username);
        } catch (ClassNotFoundException | SQLException e) {
            ErrM = e;
            System.out.println("-Exception occurred while creating a new user: " + e.getMessage());
        } finally {
            preparedStatementUser.close();
            preparedStatementSpaceship.close();
            connect.close();
        }
        return ErrM == null;
    }

    /**
     *
     * @param spaceshipid Remove user and spaceship with this id
     * @return Returns if the user is removed
     * @throws Exception
     */
    private boolean RemoveUser(Integer spaceshipid) throws Exception {
        Exception ErrM = null;
        Connection connect = null;
        PreparedStatement preparedStatementSpaceship = null;
        PreparedStatement preparedStatementUser = null;
        try {
            System.out.println(String.format("---[DATABASE] %s", ConnectionString.getConnectionString()));
            System.out.println("---[DATABASE] Setting up connection...");
            Class.forName("com.mysql.jdbc.Driver");
            connect = DriverManager.getConnection(ConnectionString.getConnectionString());
            System.out.println("---[DATABASE] Connection established");

            preparedStatementUser = connect.prepareStatement("DELETE FROM account WHERE spaceship_id = ?;");
            preparedStatementSpaceship = connect.prepareStatement("DELETE FROM spaceship WHERE id = ?;");

            preparedStatementUser.setInt(1, spaceshipid);
            preparedStatementSpaceship.setInt(1, spaceshipid);

            preparedStatementUser.executeUpdate();
            preparedStatementSpaceship.executeUpdate();
            System.out.println("---[DATABASE] User removed");
        } catch (ClassNotFoundException | SQLException e) {
            ErrM = e;
            System.out.println("-Exception occurred while removing user: " + e.getMessage());
        } finally {
            preparedStatementUser.close();
            preparedStatementSpaceship.close();
            connect.close();
        }
        return ErrM == null;
    }

    /**
     *
     * @return Returns list of User objects.
     */
    private List<User> GetUsers() throws Exception {
        Exception ErrM = null;
        List<User> userList = null;
        Connection connect = null;
        PreparedStatement preparedStatementUser = null;
        try {
            System.out.println(String.format("---[DATABASE] %s", ConnectionString.getConnectionString()));
            System.out.println("---[DATABASE] Setting up connection...");
            Class.forName("com.mysql.jdbc.Driver");
            connect = DriverManager.getConnection(ConnectionString.getConnectionString());
            System.out.println("---[DATABASE] Connection established");

            preparedStatementUser = connect.prepareStatement("SELECT * FROM account;");

            ResultSet rs = preparedStatementUser.executeQuery();
            while (rs.next()) {
                String username = rs.getString("username");
                String password = rs.getString("password");
                Integer spaceshipid = rs.getInt("spaceship_id");
                boolean moderator = rs.getBoolean("ismoderator");
                userList.add(new User(username, password, spaceshipid, moderator));
            }

            System.out.println("---[DATABASE] GetUsers queried");
        } catch (ClassNotFoundException | SQLException e) {
            ErrM = e;
            System.out.println("-Exception occurred while removing user: " + e.getMessage());
        } finally {
            preparedStatementUser.close();
            connect.close();
        }
        if (ErrM != null) {
            throw ErrM;
        }

        return userList;
    }
}
