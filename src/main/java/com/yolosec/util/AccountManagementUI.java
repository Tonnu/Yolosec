package com.yolosec.util;

import com.yolosec.domain.User;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Administrator
 */
public class AccountManagementUI extends javax.swing.JFrame implements Runnable {

    private UserTableModel tbm;

    /**
     * Creates new form AccountManagementUI
     */
    public AccountManagementUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRefresh = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jUserTable = new javax.swing.JTable();
        jTbId = new javax.swing.JTextField();
        jTbUsername = new javax.swing.JTextField();
        jTbPassword = new javax.swing.JTextField();
        jCbIsModerator = new javax.swing.JCheckBox();
        btnAddUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Account Management");
        setResizable(false);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove User");
        btnRemove.setToolTipText("");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnUpdate.setText("Push Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jUserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jUserTable);

        jTbId.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTbId.setText("-1");
        jTbId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTbIdFocusLost(evt);
            }
        });

        jTbUsername.setText("username");
        jTbUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTbUsernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTbUsernameFocusLost(evt);
            }
        });

        jTbPassword.setText("password");
        jTbPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTbPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTbPasswordFocusLost(evt);
            }
        });

        btnAddUser.setText("Add User");
        btnAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTbId, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTbUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCbIsModerator)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(btnAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddUser)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRefresh)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addGap(189, 189, 189))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTbId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTbUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTbPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCbIsModerator))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.loadTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        try {
            Integer id = (Integer) tbm.getValueAt(jUserTable.getSelectedRow(), 0);
            this.RemoveUser(id);
            tbm.removeRow(jUserTable.getSelectedRow());
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
        rootPane.repaint();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            List<User> modified = new ArrayList<>();
            List<User> original = this.GetUsers();
            for (User u : tbm.getUserList()) {
                for (User ou : original) {
                    if (u.getId().equals(ou.getId())) {
                        if (!u.getUsername().equals(ou.getUsername()) || !u.getPassword().equals(ou.getPassword()) || u.getMod() != ou.getMod() || u.getIsLoggedIn() != ou.getIsLoggedIn()) {
                            modified.add(u);
                        }
                    }
                }
            }
            System.out.println("Number of users changed: " + modified.size());
            boolean success = this.UpdateUsers(modified);
            System.out.println("Database users updated: " + success);
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUserActionPerformed
        String username = jTbUsername.getText();
        String password = jTbPassword.getText();
        Integer id = Integer.parseInt(jTbId.getText());
        boolean isModerator = jCbIsModerator.isSelected();
        boolean success = false;
        try {
            success = this.CreateUser(username, password, id, isModerator);
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
        if (success) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, String.format("User (%s) successfully created.", username));
            jTbUsername.setText("username");
            jTbPassword.setText("password");
            jTbId.setText("-1");
            jCbIsModerator.setSelected(false);
            tbm.addRow(new User(username, password, id, isModerator, false));
        } else {
            javax.swing.JOptionPane.showMessageDialog(rootPane, String.format("Failed to create user (%s).", username));
        }
        rootPane.repaint();
    }//GEN-LAST:event_btnAddUserActionPerformed

    private void jTbUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTbUsernameFocusGained
        if (jTbUsername.getText().equals("username")) {
            jTbUsername.setText("");
        }
    }//GEN-LAST:event_jTbUsernameFocusGained

    private void jTbUsernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTbUsernameFocusLost
        if (jTbUsername.getText().isEmpty()) {
            jTbUsername.setText("username");
        }
    }//GEN-LAST:event_jTbUsernameFocusLost

    private void jTbPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTbPasswordFocusGained
        if (jTbPassword.getText().equals("password")) {
            jTbPassword.setText("");
        }
    }//GEN-LAST:event_jTbPasswordFocusGained

    private void jTbPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTbPasswordFocusLost
        if (jTbPassword.getText().isEmpty()) {
            jTbPassword.setText("password");
        }
    }//GEN-LAST:event_jTbPasswordFocusLost

    private void jTbIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTbIdFocusLost
        try {
            Integer.parseInt(jTbId.getText());
        } catch (NumberFormatException e) {
            jTbId.setText("-1");
        }
    }//GEN-LAST:event_jTbIdFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUser;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox jCbIsModerator;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTbId;
    private javax.swing.JTextField jTbPassword;
    private javax.swing.JTextField jTbUsername;
    private javax.swing.JTable jUserTable;
    // End of variables declaration//GEN-END:variables
    /**
     *
     * @param username
     * @param password
     * @param spaceshipid optional id, if value is -1, get value from database
     * @return Returns if user is created
     * @throws Exception
     */
    private boolean CreateUser(String username, String password, Integer spaceshipid, boolean isModerator) throws Exception {
        Exception ErrM = null;
        Connection connect = null;

        if (spaceshipid < 0) {
            spaceshipid = GetLatestUserId();
            if (spaceshipid == -1) {
                throw new Exception("Failed to create new UserId");
            }
        }
        PreparedStatement preparedStatementSpaceship = null;
        PreparedStatement preparedStatementUser = null;
        try {
            //System.out.println(String.format("---[DATABASE] %s", ConnectionString.getConnectionString()));
            System.out.println("---[DATABASE] Setting up connection...");
            Class.forName("com.mysql.jdbc.Driver");
            connect = DriverManager.getConnection(ConnectionString.getConnectionString());
            System.out.println("---[DATABASE] Connection established");

            preparedStatementSpaceship = connect.prepareStatement("INSERT INTO spaceship (id, position_x, position_y, direction, resource_common, resource_rare, resource_magic) VALUES (?, ?, ?, ?, ?, ? ,?);");
            preparedStatementUser = connect.prepareStatement("INSERT INTO account (username, password, spaceship_id, ismoderator, loggedIn) VALUES (?, ?, ?, ?, 0);");

            preparedStatementSpaceship.setInt(1, spaceshipid);
            preparedStatementSpaceship.setInt(2, 0); //x
            preparedStatementSpaceship.setInt(3, 0); //y
            preparedStatementSpaceship.setInt(4, 1); //direction
            preparedStatementSpaceship.setInt(5, 0); //resource_common
            preparedStatementSpaceship.setInt(6, 0); //resource_rare
            preparedStatementSpaceship.setInt(7, 0); //resource_magic
            preparedStatementUser.setString(1, username);
            preparedStatementUser.setString(2, password);
            preparedStatementUser.setInt(3, spaceshipid);
            preparedStatementUser.setInt(4, isModerator ? 1 : 0);

            preparedStatementSpaceship.executeUpdate();
            preparedStatementUser.executeUpdate();
            System.out.println("---[DATABASE] User created: " + username);
        } catch (ClassNotFoundException | SQLException e) {
            ErrM = e;
            System.out.println("-Exception occurred while creating a new user: " + e.getMessage());
        } finally {
            preparedStatementUser.close();
            preparedStatementSpaceship.close();
            connect.close();
        }
        return ErrM == null;
    }

    private int GetLatestUserId() throws Exception {
        Exception ErrM = null;
        Connection connect = null;
        PreparedStatement preparedStatement = null;
        int newId = -1;
        try {
            //System.out.println(String.format("---[DATABASE] %s", ConnectionString.getConnectionString()));
            System.out.println("---[DATABASE] Setting up connection...");
            Class.forName("com.mysql.jdbc.Driver");
            connect = DriverManager.getConnection(ConnectionString.getConnectionString());
            System.out.println("---[DATABASE] Connection established");

            preparedStatement = connect.prepareStatement("SELECT MAX(spaceship_id) as maxid FROM account;");
            ResultSet result = preparedStatement.executeQuery();
            while (result.next()) {
                newId = result.getInt("maxid") + 1;
                System.out.println("---[DATABASE] Userid Retrieved: " + newId);
            }
        } catch (ClassNotFoundException | SQLException e) {
            ErrM = e;
            System.out.println("-Exception occurred while fetching the last userid: " + e.getMessage());
        } finally {
            preparedStatement.close();
            connect.close();
        }
        if (ErrM != null) {
            newId = -1;
        }
        return newId;
    }

    /**
     *
     * @param spaceshipid Remove user and spaceship with this id
     * @return Returns if the user is removed
     * @throws Exception
     */
    private boolean RemoveUser(Integer spaceshipid) throws Exception {
        Exception ErrM = null;
        Connection connect = null;
        PreparedStatement preparedStatementSpaceship = null;
        PreparedStatement preparedStatementUser = null;
        try {
            //System.out.println(String.format("---[DATABASE] %s", ConnectionString.getConnectionString()));
            System.out.println("---[DATABASE] Setting up connection...");
            Class.forName("com.mysql.jdbc.Driver");
            connect = DriverManager.getConnection(ConnectionString.getConnectionString());
            System.out.println("---[DATABASE] Connection established");

            preparedStatementUser = connect.prepareStatement("DELETE FROM account WHERE spaceship_id = ?;");
            preparedStatementSpaceship = connect.prepareStatement("DELETE FROM spaceship WHERE id = ?;");

            preparedStatementUser.setInt(1, spaceshipid);
            preparedStatementSpaceship.setInt(1, spaceshipid);

            preparedStatementUser.executeUpdate();
            preparedStatementSpaceship.executeUpdate();
            System.out.println("---[DATABASE] User removed: " + spaceshipid);
        } catch (ClassNotFoundException | SQLException e) {
            ErrM = e;
            System.out.println("-Exception occurred while removing user: " + e.getMessage());
        } finally {
            preparedStatementUser.close();
            preparedStatementSpaceship.close();
            connect.close();
        }
        return ErrM == null;
    }

    /**
     *
     * @return Returns list of User objects.
     */
    private List<User> GetUsers() throws Exception {
        Exception ErrM = null;
        List<User> userList = new ArrayList<>();
        Connection connect = null;
        PreparedStatement preparedStatementUser = null;
        try {
            //System.out.println(String.format("---[DATABASE] %s", ConnectionString.getConnectionString()));
            System.out.println("---[DATABASE] Setting up connection...");
            Class.forName("com.mysql.jdbc.Driver");
            connect = DriverManager.getConnection(ConnectionString.getConnectionString());
            System.out.println("---[DATABASE] Connection established");

            preparedStatementUser = connect.prepareStatement("SELECT * FROM account;");

            ResultSet rs = preparedStatementUser.executeQuery();
            while (rs.next()) {
                String username = rs.getString("username");
                String password = rs.getString("password");
                Integer spaceshipid = rs.getInt("spaceship_id");
                boolean moderator = rs.getBoolean("ismoderator");
                boolean isLoggedIn = rs.getBoolean("loggedIn");
                userList.add(new User(username, password, spaceshipid, moderator, isLoggedIn));
            }

            System.out.println("---[DATABASE] GetUsers queried, number of users: " + userList.size());
        } catch (ClassNotFoundException | SQLException e) {
            ErrM = e;
            System.out.println("-Exception occurred while removing user: " + e.getMessage());
        } finally {
            preparedStatementUser.close();
            connect.close();
        }
        if (ErrM != null) {
            throw ErrM;
        }

        return userList;
    }

    /**
     *
     * @param users List of users to be updated in the database
     * @return Returns if the updates were successful
     * @throws Exception
     */
    private boolean UpdateUsers(List<User> users) throws Exception {
        Exception ErrM = null;
        Connection connect = null;
        //PreparedStatement preparedStatementSpaceship = null;
        PreparedStatement preparedStatementUser = null;
        try {
            //System.out.println(String.format("---[DATABASE] %s", ConnectionString.getConnectionString()));
            System.out.println("---[DATABASE] Setting up connection...");
            Class.forName("com.mysql.jdbc.Driver");
            connect = DriverManager.getConnection(ConnectionString.getConnectionString());
            System.out.println("---[DATABASE] Connection established");

            for (User u : users) {

                //preparedStatementSpaceship = connect.prepareStatement("UPDATE spaceship SET position_x=?, position_y=?, direction=?, resource_common=?, resource_rare=?, resource_magic=? WHERE id=?;");
                preparedStatementUser = connect.prepareStatement("UPDATE account SET username=?, password=?, ismoderator=?, loggedIn=? WHERE spaceship_id=?;");

//                preparedStatementSpaceship.setInt(1, spaceshipid);
//                preparedStatementSpaceship.setInt(2, 0); //x
//                preparedStatementSpaceship.setInt(3, 0); //y
//                preparedStatementSpaceship.setInt(4, 1); //direction
//                preparedStatementSpaceship.setInt(5, 0); //resource_common
//                preparedStatementSpaceship.setInt(6, 0); //resource_rare
//                preparedStatementSpaceship.setInt(7, 0); //resource_magic
                preparedStatementUser.setString(1, u.getUsername());
                preparedStatementUser.setString(2, u.getPassword());
                preparedStatementUser.setInt(3, u.getMod() ? 1 : 0);
                preparedStatementUser.setInt(4, u.getIsLoggedIn() ? 1 : 0);
                preparedStatementUser.setInt(5, u.getId());

                //preparedStatementSpaceship.executeUpdate();
                preparedStatementUser.executeUpdate();
                System.out.println("---[DATABASE] User updated: " + u.getUsername());
            }
        } catch (ClassNotFoundException | SQLException e) {
            ErrM = e;
            System.out.println("-Exception occurred while creating a new user: " + e.getMessage());
        } finally {
            preparedStatementUser.close();
            //preparedStatementSpaceship.close();
            connect.close();
        }
        return ErrM == null;
    }

    @Override
    public void run() {
        this.setVisible(true);
        this.toFront();
        this.loadTable();
    }

    private void loadTable() {
        try {
            this.tbm = new UserTableModel(this.GetUsers());
            jUserTable.setModel(tbm);
            jUserTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            jUserTable.getColumnModel().getColumn(3).setPreferredWidth(30);
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }
}
